import random
from math import gcd
from sympy import isprime

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –±–∏—Ç–Ω–æ—Å—Ç–∏
def generate_large_prime(length):

    while True:
        candidate = random.getrandbits(length) | 1  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        if isprime(candidate):
            return candidate


def generate_keypair(p, q):
    # p –∏ q - –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—à–µ)
    n = p * q # –º–æ–¥—É–ª—å rsa
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≠–π–ª–µ—Ä–∞
    phi = (p - 1) * (q - 1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—É—é –ø—Ä–æ—Å—Ç–æ—Ç—É
    def is_coprime(e, phi):
        return gcd(e, phi) == 1 # –ù–û–î

    e = 65537  # –û–±—ã—á–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ 65537
    if not is_coprime(e, phi):
        raise ValueError("e –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç—ã–º —Å phi(n)")

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã d
    d = pow(e, -1, phi)

    return ((e, n), (d, n))



# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
def encrypt(pk, plaintext):
    numbers = [ord(char) for char in plaintext]
    ciphertext = [pow(num, pk[0], pk[1]) for num in numbers]
    return ciphertext


# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
def decrypt(sk, ciphertext):
    plaintext_numbers = [pow(c, sk[0], sk[1]) for c in ciphertext]
    message = ''.join(chr(num) for num in plaintext_numbers)
    return message


def main():
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è RSA! üòä")

    public_key, private_key = None, None

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
        print("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏")
        print("2. –í–≤–µ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á –≤—Ä—É—á–Ω—É—é")
        print("3. –í–≤–µ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á –≤—Ä—É—á–Ω—É—é")
        print("4. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("5. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("6. –í—ã—Ö–æ–¥")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

        if choice == '1':

            length = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –±–∏—Ç–∞—Ö: "))
            p = generate_large_prime(length)
            q = generate_large_prime(length)
            public_key, private_key = generate_keypair(p, q)
            print("–û—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á:", public_key)
            print("–ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á:", private_key)

        elif choice == '2':
            e = int(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ e: "))
            n = int(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ n: "))
            public_key = (e, n)
            print("–û—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", public_key)

        elif choice == '3':
            d = int(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ d: "))
            n = int(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ n: "))
            private_key = (d, n)
            print("–ó–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", private_key)

        elif choice == '4':
            if public_key is None:
                print("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á! üîë")
                continue
            message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")
            encrypted_message = encrypt(public_key, message)
            print("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", encrypted_message)

        elif choice == '5':
            if private_key is None:
                print("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á! üîë")
                continue
            ciphertext_input = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏): ")
            ciphertext = list(map(int, ciphertext_input.split(',')))
            decrypted_message = decrypt(private_key, ciphertext)
            print("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", decrypted_message)

        elif choice == '6':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ! üëã")
            break

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()
