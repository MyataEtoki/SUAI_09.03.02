import numpy as np
import matplotlib.pyplot as plt

# построение фрактала жюлиа
def julia_set(c, xmin, xmax, ymin, ymax, width, height, max_iter):
    # Создание массива комплексных чисел
    x = np.linspace(xmin, xmax, width)
    # равномерно распределяем точки по осям(ширине/высоте)
    y = np.linspace(ymin, ymax, height)
    z = np.array(np.meshgrid(x, y)).T.reshape(-1, 2)
    # создаётся координатная сетка из двух одномерных массивов x и y.
    # затем оборачивает матрицу в массив numpy
    # T - чтобы транспонирвоать(строки->стобцы) массив
    # reshape меняет форму массива. #
    # Параметр -1 => кол-во строк будет авто рассчитано, сохранит общее количество элементов.
    z = z[:, 0] + 1j * z[:, 1] # двухмерный массив, пары (x,y) из сетки, чтобы построит график

    # Инициализация массива для подсчета итераций (это холст для будущего рисунка)
    img = np.zeros(z.shape, dtype=int) # массив заполненный целыми нулями, размера как массив z

    # Основной цикл для вычисления фрактала
    for i in range(max_iter):
        mask = np.abs(z) <= 2 # возвращает массив модулей для каждого элемента массива комплексных чисел z
        # сравнивает каждое значения из массива модулей с числом 2 -> массив
        img[mask] = i # записываем точки, которые принадлежат мн-ву
        z[mask] = z[mask] ** 2 + c  # Обновляем z согласно формуле Жюлиа
        # вычисляем следующие точки!

    return img.reshape((height, width))
# создаём из одномерного массива полученных значений двумерный
# матрицу, где каждая ячейка связана с пикселем изображения.

#  Чем ярче точка, тем ближе она к множеству Жюлиа и тем больше итераций ей нужно,
#  чтобы уйти от нуля на заданное большое расстояние

def display_fractal(c, xmin, xmax, ymin, ymax, width=1600, height=1600, max_iter=256):
    img = julia_set(c, xmin, xmax, ymin, ymax, width, height, max_iter)
    # вызов функции вычисляющей точки, принадлежащие множеству жюлиа
    plt.imshow(img, extent=(xmin, xmax, ymin, ymax), cmap='plasma') # cmap - меняет градиентную палитру из matplotlib
# отображает изображение - массив с точками, принадлежащими мн-ву жюлиа
#    extent - задаёт границы картинки по осям, чтобы правильно сопоставить коорды и числа
#    plt.colorbar() # показывает полосу цвета-значения справа
    plt.title(f'Фрактал Жюлиа для c={c}')
    plt.xlabel('Re')
    plt.ylabel('Im')
    plt.show()


# Дано:
c = complex(-0.5, 0.602322)  # комплексное число (реальная часть, мнимая часть)
xmin, xmax = -1.5, 1.5  # Диапазон по x
ymin, ymax = -1.5, 1.5  # Диапазон по y
display_fractal(c, xmin, xmax, ymin, ymax) # Вызов функции отображения фрактала
